#!perl
use strict;
use File::Copy;

use lib("./lib");
use lib("../../lib");
use ares_core;
use ares_map;
use ares_game;
use ares_object;
use ares_player;
use ares_faction;
use stard_lib;
use stard_log;

$|=1;

my $ares_home = '.';
my $ares_maps = "$ares_home/Maps";
my $ares_state = "$ares_home/State";
my $ares_state_faction = "$ares_state/Factions";
my $ares_state_player = "$ares_state/Players";
ares_setup_run_env($ares_home);
stard_setup_run_env("./../../");

set_loglevel(6);

my $timestamp = `date +%s`;
$timestamp =~s/\s//g;
my %config = %{stard_read_config("$ares_home/ares.cfg")};

main(@ARGV);
exit 0;
##############################################

## main
sub main {
	my $player = $_[0];
	my $map = $_[1];

	if ($player && $player ne '' && !stard_is_admin($player)) {
		stard_broadcast("$player, You are not an admin, and cannot run that command.");
		exit 1;
	}

	if (!$map && $config{General}{default_map}) {
		$map = $config{General}{default_map};
	}

	if (!$map) {
		stard_broadcast("Error, no default map set, and no default map selected. Could not start.");
		print stard_last_output();
		stdout_log("No default map found and no map requested. Cannot start a new game!", 0);
		exit 1;
	}

	# wipe out the current setup
	ares_clean_all();

	# prep new map config
	ares_set_cur_map($map);
	my %ares_map_config = %{ares_get_raw_map_config("$ares_maps/$map.map")};

	if (! keys %ares_map_config) {
		stard_broadcast("Error Loading map: $map");
	}

	ares_set_game_state("complete");

	ares_setup_factions();

	ares_setup_map(\%ares_map_config);

	assign_remaining_players();
	ares_set_game_state("");
}

## ares_setup_factions
# Setup the factions needed to play the game.
sub ares_setup_factions {
	my @teams;
	stdout_log("Creating Factions", 5);
	if (-r "$ares_home/teams.cfg") {
		open(my $teams_fh, "<", "$ares_home/teams.cfg");
		@teams = <$teams_fh>;
		close($teams_fh);
	}
	else {
		@teams = ("Alpha Squadren", "Beta Squadren", "Gamma Squadren", "Delta Squaldren");
	};

	my %faction_list = %{stard_faction_list_bid()};
	my %faction_nlist;


	for (my $teamNum = 0; $teamNum < $config{General}{team_number}; $teamNum++) {
		my $team = $teams[$teamNum];
		my $npcTeam = "$team NPC";
		if(!stard_faction_create($team, '')) {
			stard_broadcast("Failed to start game...");
			print stard_last_output();
			stdout_log("Failed to create faction $team. Aborting start game", 1);
			exit 1;
		}
		if(!stard_faction_create($npcTeam, '')) {
			stard_broadcast("Failed to start game...");
			print stard_last_output();
			stdout_log("Failed to create faction $npcTeam. Aborting start game", 1);
			exit 1;
		}

		%faction_nlist=%{stard_faction_list_bname()};

		mkdir "$ares_state_faction";

		open(my $team_fh, ">", "$ares_state_faction/team$teamNum");
		print $team_fh $faction_nlist{$team}{id};
		close($team_fh);

		ares_set_faction_name($faction_nlist{$team}{id}, $team);
		
		ares_set_faction_state($faction_nlist{$team}{id}, "Active");
		open($team_fh, ">", "$ares_state_faction/$faction_nlist{$team}{id}/State");
		print $team_fh "Active";
		close($team_fh);
		ares_set_faction_npc($faction_nlist{$team}{id}, $faction_nlist{$npcTeam}{id});
		stdout_log("Faction '$team' created", 6);
	};

	sleep 1;

	%faction_list = %{stard_faction_list_bid()};
	if(!stard_faction_set_all_relations('enemy')) {
		print stard_last_output();
		stdout_log("Failed setting relations between all factions to enemy.", 1);
	}
	stdout_log("Setting relations between all factions to enemy.", 6);
	foreach my $faction_id (keys %faction_list) {
		if ($faction_id > 0) {
			open(my $team_fh, "<", "$ares_state_faction/$faction_id/NPC");
			my $npc = join('', <$team_fh>);
			close($team_fh);
	
	
			if ($npc) {
				if (!stard_faction_mod_relations($faction_id, $npc, 'ally')) {
					print stard_last_output();
					stdout_log("Failed to set relations between '$faction_id' and '$npc' to ally. Aborting stat game...", 1);
					exit 1;
				}
				stdout_log("Setting relations between '$faction_id' and '$npc' to ally.", 6);
			}
			stdout_log("Setting relations between '$faction_id' and '$npc' to neutral.", 6);
			if(!stard_faction_mod_relations($faction_id, -2, 'neutral')) {
				print stard_last_output();
				stdout_log("Failed setting relations between '$faction_id' and '$npc' to neutral.", 1);
			}
		};
		
	};
};

## ares_setup_map
# Create whatever objects are needed by the given map
sub ares_setup_map {
	stdout_log("Setting up objects on the map", 5);
	mkdir "$ares_state/Objects";
	my %ares_map_config = %{$_[0]};
	foreach my $object (keys %ares_map_config) {
		stdout_log("Creating: $object", 6);
		$ares_map_config{$object}{sector} = stard_location_add($ares_map_config{$object}{sector}, $config{General}{map_center});
		my $sector = $ares_map_config{$object}{sector};
		my $blueprint = $ares_map_config{$object}{blueprint};
		$ares_map_config{$object}{owner} = ares_team_to_faction($ares_map_config{$object}{owner});
		my $owner = $ares_map_config{$object}{owner};
		my $entity = "$object\_$timestamp";
		my $npc;
	
	
		stdout_log("Cleaning '$sector' of stuff (to ensure we don't spawn on top of things)", 6);
		stard_cmd("/load_sector_range $sector $sector");
		# Clean out what's already in the system (pirate stations, trade outputs, and hoolagens)
		if (!stard_despawn_sector("", "all", "0", $sector)) {
			stard_boardcast("Error Despawning Sector $sector.\n");
			print stard_last_output();
			stdout_log("Error Despawning Sector $sector... Aborting game start", 1);
			exit 1;
		}

		stdout_log("Deleting all entities that start with '$object' just to be sure of no naming collisions", 6);
		# Get rid of anything that already has the name (as names need to be unique).
		if (!stard_despawn_all($object, "all", "0")) {
			stard_broadcast("Error despawning all.\n");
			print stard_last_output();
			stdout_log("Error despawning all... Aborting game start", 1);
			exit 1;
		}
		ares_write_object_status($object, $owner);

		if (!ares_place_object($object, $ares_map_config{$object})) {
			exit 1;
		}

		if ($ares_map_config{$object}{home}) {
			stdout_log("Setting $object as a home base", 6);
			ares_set_faction_home($owner, $sector);
			if (!stard_sector_chmod($sector, "add", "noexit")) {
				if (!stard_sector_chmod($sector, "add", "noexit")) {
					stard_broadcast("Error setting noexit on $sector.\n");
					print stard_last_output();
					stdout_log("Error setting noexit on $sector... Aborting game start", 1);
					exit 1;
				}
			}
					
			if (! stard_sector_chmod($sector, "add", "protected")) {
				if (!stard_sector_chmod($sector, "add", "protected")) {
					stard_broadcast("Error setting protected on $sector.\n");
					print stard_last_output();
					stdout_log("Error setting protected on $sector... Aborting game start", 1);
					exit 1;
				}
			}
				
		};

		if ($owner != -2 && $ares_map_config{$object}{defenders}) {
			my @defenders = split(",", $ares_map_config{$object}{defenders});
			my @pos = (); 

			if ($ares_map_config{$object}{defender_pos}) {
				@pos = split(",", $ares_map_config{$object}{defender_pos});
			};
			ares_spawn_defenders($ares_map_config{$object}, \@defenders, \@pos);
		}

		if ($ares_map_config{$object}{pirates}) {
			my @pirates = split(",", $ares_map_config{$object}{pirates});
			my $pirate_faction = -1;
			my @pos = (); 

			if ($ares_map_config{$object}{pirate_pos}) {
				@pos = split(",", $ares_map_config{$object}{pirate_pos});
			};
			ares_spawn_mobs(\@pirates, \@pos, $pirate_faction, $sector, 1);
		}

		if ($ares_map_config{$object}{doodads}) {
			my @doodads = split(",", $ares_map_config{$object}{doodads});
			my @pos = (); 
			my $doodad_faction = -3;

			if ($ares_map_config{$object}{doodad_pos}) {
				@pos = split(",", $ares_map_config{$object}{doodad_pos});
			};
			ares_spawn_mobs(\@doodads, \@pos, $doodad_faction, $sector, 0);
		}
	};
};

sub assign_remaining_players {
	my %player_data = %{stard_player_list()};
	mkdir "$ares_state_player";
	
	for my $player (keys %player_data) {
		ares_player_lock($player);
		ares_new_player($player);
		ares_player_unlock($player);
	};
}

