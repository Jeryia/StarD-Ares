#!perl
use strict;
use warnings;

use lib("./lib");
use ares_core;
use ares_player;
use ares_game;

use lib("../../lib");
use stard_lib;
use stard_log;

ares_setup_run_env('.');
stard_setup_run_env("./../../");

main(@ARGV);
exit 0;




sub main {
	my $player = $_[0];
	my $faction_id = $_[1];

	my $game_state = ares_get_game_state();

	my $lock_fh = ares_player_lock($player);
	if (!$lock_fh) {
		exit 0;
	}

	if ($game_state eq 'in_progress') {
		my %faction_sizes = %{ares_get_faction_sizes()};
		
		foreach my $faction2 (keys %faction_sizes) {
			if (
				defined $faction_sizes{$faction_id} &&
				defined $faction_sizes{$faction2} &&
				$faction_id != $faction2 &&
				$faction_sizes{$faction_id} >= $faction_sizes{$faction2}
			) {
				my $message = "You can only switch factions if the team you are joining has less players.";
				stard_pm($player, $message);
				ares_fix_faction($player);
				exit 0;
			}
		}
	}

	if (!$faction_id) {
		exit 0;
	}

	if (ares_faction_valid($faction_id)) {
		my $old_faction = ares_get_player_faction($player);
		if ($old_faction == $faction_id) {
			exit 0;
		}
		ares_add_faction_member($player, $faction_id);
		my $home = ares_get_faction_home($faction_id);
		stard_change_sector_for($player, $home);
		stard_set_spawn_player($player);
		stard_broadcast("$player has changed factions to " . ares_get_faction_name($faction_id));
	}
	else {
		stard_pm($player, "The faction you tried to join is an NPC faction. This is not permitted");
		ares_fix_faction($player);
	}
	ares_player_unlock($lock_fh);
}

